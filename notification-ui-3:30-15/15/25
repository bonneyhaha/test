import React, { useState, useEffect, useRef } from ‘react’;
import { X, Wifi, WifiOff } from ‘lucide-react’;

const NotificationApp = () => {
const [notifications, setNotifications] = useState([]);
const [isConnected, setIsConnected] = useState(false);
const [employeeId] = useState(‘12345’); // Fixed for now
const wsRef = useRef(null);
const audioRef = useRef(null);

useEffect(() => {
// Connect to WebSocket
const connectWebSocket = () => {
try {
// For demo purposes, we’ll simulate WebSocket connection
// In production: ws://107.111.157.29:8080/ws/${employeeId}
console.log(`Attempting to connect to WebSocket for employee: ${employeeId}`);

```
    // Simulate connection
    setTimeout(() => {
      setIsConnected(true);
      console.log('WebSocket connected');
    }, 1000);

    // Simulate receiving notifications every 10 seconds for demo
    const interval = setInterval(() => {
      const demoNotification = {
        id: Date.now(),
        title: 'BIG 700 Sale Ends Today!!!',
        description: 'Fitness is closer than you think. We now have 700 centres. Big 700 Sale - Celebrating 700 Centers!',
        url: 'https://www.cult.fit',
        timestamp: new Date().toISOString()
      };
      handleNewNotification(demoNotification);
    }, 10000);

    return () => clearInterval(interval);
  } catch (error) {
    console.error('WebSocket connection error:', error);
    setIsConnected(false);
  }
};

connectWebSocket();

return () => {
  if (wsRef.current) {
    wsRef.current.close();
  }
};
```

}, [employeeId]);

const handleNewNotification = (notification) => {
// Play notification sound
if (audioRef.current) {
audioRef.current.play().catch(e => console.log(‘Audio play failed:’, e));
}

```
// Add notification to list
setNotifications(prev => [notification, ...prev].slice(0, 5)); // Keep last 5 notifications

// Auto-remove after 10 seconds
setTimeout(() => {
  removeNotification(notification.id);
}, 10000);
```

};

const removeNotification = (id) => {
setNotifications(prev => prev.filter(n => n.id !== id));
};

const handleNotificationClick = (url) => {
if (url) {
window.open(url, ‘_blank’);
}
};

return (
<div className="fixed inset-0 pointer-events-none">
{/* Hidden audio element for notification sound */}
<audio ref={audioRef} src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYJGGS56+mjUBELTKXh8bllHgs=" />

```
  {/* Connection Status Indicator */}
  <div className="absolute top-4 right-4 pointer-events-auto">
    <div className={`flex items-center gap-2 px-3 py-2 rounded-lg backdrop-blur-sm ${
      isConnected ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'
    }`}>
      {isConnected ? <Wifi size={16} /> : <WifiOff size={16} />}
      <span className="text-xs font-medium">
        {isConnected ? 'Connected' : 'Disconnected'}
      </span>
    </div>
  </div>

  {/* Notifications Container */}
  <div className="absolute right-4 bottom-4 flex items-end gap-4">
    {/* Notification Stack */}
    <div className="flex flex-col gap-3 pointer-events-auto">
      {notifications.map((notification, index) => (
        <div
          key={notification.id}
          className="animate-slide-in"
          style={{
            animation: 'slideIn 0.3s ease-out'
          }}
        >
          <div
            onClick={() => handleNotificationClick(notification.url)}
            className="relative bg-gradient-to-br from-gray-900/95 to-gray-800/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-700/50 cursor-pointer hover:scale-105 transition-transform duration-200 min-w-[350px] max-w-[400px]"
          >
            {/* Close Button */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                removeNotification(notification.id);
              }}
              className="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-1.5 shadow-lg transition-colors z-10"
            >
              <X size={14} />
            </button>

            {/* Content */}
            <div className="p-5">
              {/* Title */}
              <h3 className="text-white font-bold text-lg mb-2 pr-4">
                {notification.title}
              </h3>
              
              {/* Description */}
              <p className="text-gray-300 text-sm leading-relaxed">
                {notification.description}
              </p>

              {/* Timestamp */}
              <div className="mt-3 text-xs text-gray-500">
                {new Date(notification.timestamp).toLocaleTimeString()}
              </div>
            </div>

            {/* Accent Line */}
            <div className="h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 rounded-b-2xl"></div>
          </div>
        </div>
      ))}
    </div>

    {/* Animated Bird GIF */}
    <div className="pointer-events-none mb-2">
      <img
        src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExcTZvb3ZsMnI3aDRjZHVrYXVrYzNvNXJ3YjN6Ym1qZm1xY3NxYnN6ZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3oEduSBFXK3mYSVqRq/giphy.gif"
        alt="Notification Bird"
        className="w-32 h-32 object-contain drop-shadow-2xl"
      />
    </div>
  </div>

  <style jsx>{`
    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  `}</style>
</div>
```

);
};

export default NotificationApp;